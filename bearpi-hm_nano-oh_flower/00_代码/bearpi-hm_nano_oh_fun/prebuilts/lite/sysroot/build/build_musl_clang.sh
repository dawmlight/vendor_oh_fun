#!/bin/bash

#Copyright (c) 2020-2021 Huawei Device Co., Ltd.
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

set -e

readonly MUSL_DIR="${PWD}/musl"
readonly MUSL_CUR_DIR="./musl"
readonly MUSL_DEBUG_DIR="${PWD}/musl_debug"
readonly MUSL_DEBUG_CUR_DIR="./musl_debug"
readonly MUSL_PATCH="${PWD}/musl-debug.patch"
readonly SYSROOT_DEBUG="${PWD}/usr_debug"
readonly MUSL_SOURCE="${PWD}/../../../../third_party/musl/*"
readonly OPTIMIZE_DIR="${PWD}/optimized-routines"
readonly OPTIMIZE_SOURCE="${PWD}/../../../../third_party/optimized-routines/*"
readonly LITEOSTOPDIR="${PWD}/../../../../kernel/liteos_a"
readonly SYSROOT="${PWD}/usr"

BUILD=`gcc -dumpmachine`
HOST=`gcc -dumpmachine`
TARGET=arm-liteos
CROSS_COMPILE=llvm-
CFLAGS_FOR_TARGET="--target=${TARGET} -mfloat-abi=soft -march=armv7-a -Wall -fstack-protector-strong -D_FORTIFY_SOURCE=2 -Wl,-z,relro,-z,now,-z,noexecstack"
CFLAGS_FOR_TARGET1="--target=${TARGET} -mfloat-abi=soft -mcpu=cortex-a7 -Wall -fstack-protector-strong -D_FORTIFY_SOURCE=2 -Wl,-z,relro,-z,now,-z,noexecstack"
CFLAGS_FOR_TARGET2="--target=${TARGET} -mfloat-abi=softfp -mcpu=cortex-a7 -mfpu=neon-vfpv4 -Wall -fstack-protector-strong -D_FORTIFY_SOURCE=2 -Wl,-z,relro,-z,now,-z,noexecstack"
CFLAGS_FOR_TARGET3="--target=${TARGET} -mfloat-abi=hard -mcpu=cortex-a7 -mfpu=neon-vfpv4 -Wall -fstack-protector-strong -D_FORTIFY_SOURCE=2 -Wl,-z,relro,-z,now,-z,noexecstack"

TARGET_LIBC_A="${PWD}/libc_opt_clang.a"
TARGET_LIBC_SO="${PWD}/libc_opt_clang.so"

PARALLEL=`grep ^processor /proc/cpuinfo|wc -l`
LITEOS_COMPILER_PATH=`${LITEOSTOPDIR}/tools/build/mk/get_llvm_compiler_path.sh ${CROSS_COMPILE} ${LITEOSTOPDIR}`
LDFLAG="-L${LITEOS_COMPILER_PATH}/lib/clang/9.0.0/lib/${TARGET} -L${LITEOS_COMPILER_PATH}/lib/${TARGET}/c++ --rtlib=compiler-rt -lclang_rt.builtins -lunwind -fuse-ld=lld -Wl,--build-id=sha1"

export PATH="${LITEOS_COMPILER_PATH}/bin:${PATH}"

# prepare to build musl
if [ -d "${MUSL_DIR}" ]; then
	rm -r ${MUSL_DIR}
fi
mkdir -p ${MUSL_DIR}

if [ -d "${SYSROOT}" ]; then
    rm -r ${SYSROOT}
fi
mkdir -p ${SYSROOT}

cp -r ${MUSL_SOURCE} ${MUSL_DIR}

# prepare to build optimized-routines for improve musl performance
if [ -d "${OPTIMIZE_DIR}" ]; then
    rm -r ${OPTIMIZE_DIR}
fi
mkdir -p  ${OPTIMIZE_DIR}
cp -r ${OPTIMIZE_SOURCE} ${OPTIMIZE_DIR}

# build optimized-routines
function build_opt()
{
    pushd ${OPTIMIZE_DIR}
    # generate the config.mk file required for compiling the optimized-routines lib.
    exec 3>&1 1>config.mk
    cat << EOF
# This version of config.mk was generated by:
# build_musl.sh
# The default configuration(CFLAGS) is from optimized-routines.
# Any changes made here will be lost if build_musl.sh re-run

# Target architecture: aarch64, arm or x86_64
ARCH = arm

# Subprojects to build
SUBS = string

# Use for cross compilation with gcc/clang.
CROSS_COMPILE = ${CROSS_COMPILE}

# Compiler for the target
CC = ${LITEOS_COMPILER_PATH}/bin/clang
CFLAGS = -std=c99 -pipe -O3 --target=arm-liteos -march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=softfp
CFLAGS += -Wall -Wno-missing-braces

# Enable debug info.
#HOST_CFLAGS += -g
#CFLAGS += -g

# Use with clang.
CFLAGS += -ffp-contract=fast
LDFLAGS = -L${LITEOS_COMPILER_PATH}/lib/clang/9.0.0/lib/${TARGET}/a7_softfp_neon-vfpv4 -L${SYSROOT}/../../usr/lib/${TARGET}/a7_softfp_neon-vfpv4 -lclang_rt.builtins -fuse-ld=lld -nostartfiles

EOF
    exec 1>&3 3>&-
    make -j
    popd
}

# generate the final libc.so file.
function install_opt_libc()
{
    if [ -e "${TARGET_LIBC_A}" ]; then
        rm ${TARGET_LIBC_A}
    fi
    if [ -e "${TARGET_LIBC_SO}" ]; then
        rm ${TARGET_LIBC_SO}
    fi

    # make libc_opt.a libc_opt.so by makefile
    make musldir=$2 -j

    # copy libc_opt.so libc_opt.a to a specified directory to replace the original libc.so libc.a file.
    if [ -e "${TARGET_LIBC_A}" ] && [ -e "${TARGET_LIBC_SO}" ] ; then
        rm $1/lib/libc.a $1/lib/libc.so
        cp ${TARGET_LIBC_A} $1/lib/libc.a
        cp ${TARGET_LIBC_SO} $1/lib/libc.so
    else
        printf "build libc_opt error!"
        exit 1;
    fi
}

function install_debug_musl()
{
	mkdir -p ${SYSROOT}/include/${TARGET}/debug
	mkdir -p ${SYSROOT}/lib/${TARGET}/debug
	mkdir -p ${SYSROOT}/lib/${TARGET}/a7_soft/debug
	mkdir -p ${SYSROOT}/lib/${TARGET}/a7_softfp_neon-vfpv4/debug
	mkdir -p ${SYSROOT}/lib/${TARGET}/a7_hard_neon-vfpv4/debug
	cp -f ${SYSROOT_DEBUG}/include/${TARGET}/debug.h ${SYSROOT}/include/${TARGET}/debug
	cp -f ${SYSROOT_DEBUG}/lib/${TARGET}/libc.* ${SYSROOT}/lib/${TARGET}/debug
	cp -f ${SYSROOT_DEBUG}/lib/${TARGET}/a7_soft/libc.* ${SYSROOT}/lib/${TARGET}/a7_soft/debug
	cp -f ${SYSROOT_DEBUG}/lib/${TARGET}/a7_softfp_neon-vfpv4/libc.* ${SYSROOT}/lib/${TARGET}/a7_softfp_neon-vfpv4/debug
	cp -f ${SYSROOT_DEBUG}/lib/${TARGET}/a7_hard_neon-vfpv4/libc.* ${SYSROOT}/lib/${TARGET}/a7_hard_neon-vfpv4/debug
}

# build musl
function build_musl()
{
	pushd $5
	if [ "$5" = "${MUSL_DEBUG_DIR}" ]; then
		patch -p1 < ${MUSL_PATCH}
	fi

	HEADERDIR="$6/include/${TARGET}"
	LIBDIR="$6/lib/${TARGET}"
	BINDIR="$6/bin/${TARGET}"
	SYSDIR="$6/sys/${TARGET}"
	mkdir -p ${LIBDIR} ${BINDIR} ${SYSDIR} ${HEADERDIR}
	CC="${LITEOS_COMPILER_PATH}/bin/clang $1" CROSS_COMPILE="${CROSS_COMPILE}" LDFLAGS="${LDFLAG}" ./configure --prefix=$6 --libdir=${LIBDIR} --bindir=${BINDIR} --syslibdir=${SYSDIR} --includedir=$HEADERDIR --build=$BUILD --host=$TARGET
	make -j ${PARALLEL}
	popd
	build_opt
	install_opt_libc "$5" "$7"
	pushd $5
	make install
	make clean

	HEADERDIR="$6/include/${TARGET}"
	LIBDIR="$6/lib/${TARGET}/a7_soft"
	BINDIR="$6/bin/${TARGET}/a7_soft"
	SYSDIR="$6/sys/a7_soft"
	mkdir -p ${LIBDIR} ${BINDIR} ${SYSDIR} ${HEADERDIR}
	CC="${LITEOS_COMPILER_PATH}/bin/clang $2" CROSS_COMPILE="${CROSS_COMPILE}" LDFLAGS="${LDFLAG}" ./configure --prefix=$6 --libdir=${LIBDIR} --bindir=${BINDIR} --syslibdir=${SYSDIR}  --includedir=${HEADERDIR} --build=${BUILD} --host=${TARGET}
	make -j ${PARALLEL}
	popd
	build_opt
	install_opt_libc "$5" "$7"
	pushd $5
	make install
	make clean

	HEADERDIR="$6/include/${TARGET}"
	LIBDIR="$6/lib/${TARGET}/a7_softfp_neon-vfpv4"
	BINDIR="$6/bin/${TARGET}/a7_softfp_neon-vfpv4"
	SYSDIR="$6/sys/${TARGET}/a7_softfp_neon-vfpv4"
	mkdir -p ${LIBDIR} ${BINDIR} ${SYSDIR} ${HEADERDIR}
	CC="${LITEOS_COMPILER_PATH}/bin/clang $3" CROSS_COMPILE="${CROSS_COMPILE}" LDFLAGS="${LDFLAG}" ./configure --prefix=$6 --libdir=${LIBDIR} --bindir=${BINDIR} --syslibdir=${SYSDIR}  --includedir=${HEADERDIR} --build=${BUILD} --host=${TARGET}
	make -j ${PARALLEL}
	popd
	build_opt
	install_opt_libc "$5" "$7"
	pushd $5
	make install
	make clean

	HEADERDIR="$6/include/${TARGET}"
	LIBDIR="$6/lib/${TARGET}/a7_hard_neon-vfpv4"
	BINDIR="$6/bin/${TARGET}/a7_hard_neon-vfpv4"
	SYSDIR="$6/sys/${TARGET}/a7_hard_neon-vfpv4"
	mkdir -p ${LIBDIR} ${BINDIR} ${SYSDIR} ${HEADERDIR}
	CC="${LITEOS_COMPILER_PATH}/bin/clang $4" CROSS_COMPILE="${CROSS_COMPILE}" LDFLAGS="${LDFLAG}" ./configure --prefix=$6 --libdir=${LIBDIR} --bindir=${BINDIR} --syslibdir=${SYSDIR}  --includedir=${HEADERDIR} --build=${BUILD} --host=${TARGET}
	make -j ${PARALLEL}
	popd
	build_opt
	install_opt_libc "$5" "$7"
	pushd $5
	make install
	popd
}

# prepare linux compat headers for musl
sh thirdparty_headers.sh ${MUSL_DIR}
# build musl
build_musl "${CFLAGS_FOR_TARGET}" "${CFLAGS_FOR_TARGET1}" "${CFLAGS_FOR_TARGET2}" "${CFLAGS_FOR_TARGET3}" "${MUSL_DIR}" "${SYSROOT}" "${MUSL_CUR_DIR}"

# prepare for musl debug
CFLAGS_DEBUG_FOR_TARGET=${CFLAGS_FOR_TARGET}" -funwind-tables -rdynamic"
CFLAGS_DEBUG_FOR_TARGET1=${CFLAGS_FOR_TARGET1}" -funwind-tables -rdynamic"
CFLAGS_DEBUG_FOR_TARGET2=${CFLAGS_FOR_TARGET2}" -funwind-tables -rdynamic"
CFLAGS_DEBUG_FOR_TARGET3=${CFLAGS_FOR_TARGET3}" -funwind-tables -rdynamic"
UNWIND_H="${LITEOS_COMPILER_PATH}/lib/clang/9.0.0/include/unwind*"
if [ -d "${MUSL_DEBUG_DIR}" ]; then
	rm -r ${MUSL_DEBUG_DIR}
fi
if [ -d "${SYSROOT_DEBUG}" ]; then
	rm -r ${SYSROOT_DEBUG}
fi
mkdir -p ${MUSL_DEBUG_DIR}
mkdir -p ${SYSROOT_DEBUG}
cp -r ${MUSL_SOURCE} ${MUSL_DEBUG_DIR}
cp -f ${UNWIND_H} ${MUSL_DEBUG_DIR}/include
# prepare linux compat headers for musl debug
sh thirdparty_headers.sh ${MUSL_DEBUG_DIR}
# build musl debug
build_musl "${CFLAGS_DEBUG_FOR_TARGET}" "${CFLAGS_DEBUG_FOR_TARGET1}" "${CFLAGS_DEBUG_FOR_TARGET2}" "${CFLAGS_DEBUG_FOR_TARGET3}" "${MUSL_DEBUG_DIR}" "${SYSROOT_DEBUG}" "${MUSL_DEBUG_CUR_DIR}"
# generate final musl debug shared library
install_debug_musl

