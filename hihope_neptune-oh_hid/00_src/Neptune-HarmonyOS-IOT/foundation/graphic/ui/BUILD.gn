# Copyright (c) 2020-2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/lite/config/component/lite_component.gni")
import("//build/lite/config/subsystem/graphic/config.gni")
import("//build/lite/ndk/ndk.gni")

lite_component("lite_ui") {
  features = [ ":ui" ]
  public_deps = features
}

ndk_lib("lite_ui_ndk") {
  lib_extension = ".so"
  deps = [ ":ui" ]
  head_files = [ "interfaces/kits" ]
}

config("graphic_define_config") {
  include_dirs = [
    "interfaces/kits",
    "interfaces/innerkits",
  ]

  defines = [
    "ENABLE_VECTOR_FONT=1",
    "ENABLE_SHAPING=0",
    "ENABLE_ICU=0",
    "ENABLE_MULTI_FONT=0",
  ]

  if (ohos_kernel_type == "linux") {
    defines += [ "RESOURCE_DIR=\"/storage/data/\"" ]
  } else {
    defines += [ "RESOURCE_DIR=\"/user/data/\"" ]
  }
}

if (enable_graphic_font) {
  copy("utils_config") {
    sources = [ "tools/qt/simulator/font/SourceHanSansSC-Regular.otf" ]
    outputs = [ "$root_out_dir/data/SourceHanSansSC-Regular.otf" ]
  }
}

shared_library("ui") {
  sources = [
    "frameworks/animator/animator.cpp",
    "frameworks/animator/easing_equation.cpp",
    "frameworks/animator/interpolation.cpp",
    "frameworks/common/graphic_startup.cpp",
    "frameworks/common/image.cpp",
    "frameworks/common/input_device_manager.cpp",
    "frameworks/common/screen.cpp",
    "frameworks/common/screen_device_proxy.cpp",
    "frameworks/common/task.cpp",
    "frameworks/common/text.cpp",
    "frameworks/common/typed_text.cpp",
    "frameworks/common/ui_font_header.cpp",
    "frameworks/components/root_view.cpp",
    "frameworks/components/text_adapter.cpp",
    "frameworks/components/ui_abstract_clock.cpp",
    "frameworks/components/ui_abstract_progress.cpp",
    "frameworks/components/ui_abstract_scroll.cpp",
    "frameworks/components/ui_analog_clock.cpp",
    "frameworks/components/ui_arc_label.cpp",
    "frameworks/components/ui_axis.cpp",
    "frameworks/components/ui_box_progress.cpp",
    "frameworks/components/ui_button.cpp",
    "frameworks/components/ui_canvas.cpp",
    "frameworks/components/ui_chart.cpp",
    "frameworks/components/ui_checkbox.cpp",
    "frameworks/components/ui_circle_progress.cpp",
    "frameworks/components/ui_dialog.cpp",
    "frameworks/components/ui_digital_clock.cpp",
    "frameworks/components/ui_image_animator.cpp",
    "frameworks/components/ui_image_view.cpp",
    "frameworks/components/ui_label.cpp",
    "frameworks/components/ui_label_button.cpp",
    "frameworks/components/ui_list.cpp",
    "frameworks/components/ui_picker.cpp",
    "frameworks/components/ui_qrcode.cpp",
    "frameworks/components/ui_radio_button.cpp",
    "frameworks/components/ui_repeat_button.cpp",
    "frameworks/components/ui_scroll_view.cpp",
    "frameworks/components/ui_slider.cpp",
    "frameworks/components/ui_surface_view.cpp",
    "frameworks/components/ui_swipe_view.cpp",
    "frameworks/components/ui_texture_mapper.cpp",
    "frameworks/components/ui_time_picker.cpp",
    "frameworks/components/ui_toggle_button.cpp",
    "frameworks/components/ui_video.cpp",
    "frameworks/components/ui_view.cpp",
    "frameworks/components/ui_view_group.cpp",
    "frameworks/core/render_manager.cpp",
    "frameworks/core/task_manager.cpp",
    "frameworks/default_resource/check_box_res.cpp",
    "frameworks/dfx/event_injector.cpp",
    "frameworks/dfx/key_event_injector.cpp",
    "frameworks/dfx/point_event_injector.cpp",
    "frameworks/dfx/ui_dump_dom_tree.cpp",
    "frameworks/dfx/ui_screenshot.cpp",
    "frameworks/dock/input_device.cpp",
    "frameworks/dock/key_input_device.cpp",
    "frameworks/dock/ohos/ohos_input_device.cpp",
    "frameworks/dock/pointer_input_device.cpp",
    "frameworks/dock/rotate_input_device.cpp",
    "frameworks/dock/virtual_input_device.cpp",
    "frameworks/draw/draw_arc.cpp",
    "frameworks/draw/draw_curve.cpp",
    "frameworks/draw/draw_image.cpp",
    "frameworks/draw/draw_label.cpp",
    "frameworks/draw/draw_line.cpp",
    "frameworks/draw/draw_rect.cpp",
    "frameworks/draw/draw_triangle.cpp",
    "frameworks/draw/draw_utils.cpp",
    "frameworks/events/event.cpp",
    "frameworks/font/base_font.cpp",
    "frameworks/font/glyphs_manager.cpp",
    "frameworks/font/ui_font.cpp",
    "frameworks/font/ui_font_adaptor.cpp",
    "frameworks/font/ui_font_allocator.cpp",
    "frameworks/font/ui_font_cache.cpp",
    "frameworks/font/ui_font_vector.cpp",
    "frameworks/font/ui_line_break.cpp",
    "frameworks/font/ui_multi_font_manager.cpp",
    "frameworks/font/ui_text_shaping.cpp",
    "frameworks/imgdecode/cache_manager.cpp",
    "frameworks/imgdecode/file_img_decoder.cpp",
    "frameworks/imgdecode/image_load.cpp",
    "frameworks/layout/flex_layout.cpp",
    "frameworks/layout/grid_layout.cpp",
    "frameworks/layout/list_layout.cpp",
    "frameworks/themes/theme.cpp",
    "frameworks/themes/theme_manager.cpp",
    "frameworks/window/window.cpp",
    "frameworks/window/window_impl.cpp",
  ]
  include_dirs = [ "//foundation/graphic/ui/frameworks" ]
  deps = [
    "//build/lite/config/component/cJSON:cjson_shared",
    "//foundation/graphic/surface:lite_surface",
    "//foundation/graphic/utils:lite_graphic_hals",
    "//foundation/graphic/wms:lite_wms",
    "//foundation/multimedia/media_lite/frameworks/player_lite:player_lite",
    "//third_party/bounds_checking_function:libsec_shared",
    "//third_party/freetype:freetype",
    "//third_party/giflib:libgif",
    "//third_party/libjpeg:libjpeg",
    "//third_party/libpng:libpng",
    "//third_party/qrcodegen:qrcodegen",
  ]

  public_deps = [ "//foundation/graphic/utils:lite_graphic_utils" ]
  public_configs = [ ":graphic_define_config" ]
  cflags = [
    "-Wall",
    "-fno-exceptions",
  ]
  cflags_cc = cflags
  ldflags = [ "-Wl,-rpath-link=$ohos_root_path/$root_out_dir" ]
}
