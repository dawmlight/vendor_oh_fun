# Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.

import("//build/lite/config/component/lite_component.gni")

config("utils_io_config") {
  include_dirs = [ "//third_party/cryptsetup/lib" ]
}

utils_io_sources = [ "lib/utils_io.c" ]

static_library("utils_io_static") {
  sources = utils_io_sources
  output_name = "utils_io"
  public_configs = [ ":utils_io_config" ]
  cflags_c = [
    "-Wall",
    "-Os",
  ]
  ldflags = [
    "-lpthread",
    "-lm",
  ]
  deps = [
    "//third_party/JSON-C:json-c_static",
    "//third_party/LVM2:devmapper_static",
    "//third_party/libuuid:libuuid_static",
    "//third_party/popt:popt_static",
  ]
}

config("argon2_config") {
  include_dirs = [ "//third_party/cryptsetup/lib/crypto_backend/argon2" ]
}

argon2_sources = [
  "lib/crypto_backend/argon2/argon2.c",
  "lib/crypto_backend/argon2/blake2/blake2b.c",
  "lib/crypto_backend/argon2/core.c",
  "lib/crypto_backend/argon2/encoding.c",
  "lib/crypto_backend/argon2/ref.c",
  "lib/crypto_backend/argon2/thread.c",
]

static_library("argon2_static") {
  sources = argon2_sources
  output_name = "argon2"
  public_configs = [ ":argon2_config" ]
  defines = [
    "HAVE_CONFIG_H",
    "_GNU_SOURCE",
    "_REENTRANT",
  ]
  configs -= [ "//build/lite/config:language_c" ]
  cflags_c = [
    "-Wall",
    "-std=c89",
    "-pthread",
    "-Os",
  ]
  ldflags = [
    "-lpthread",
    "-lm",
  ]
  deps = [
    "//third_party/JSON-C:json-c_static",
    "//third_party/LVM2:devmapper_static",
    "//third_party/libuuid:libuuid_static",
    "//third_party/popt:popt_static",
  ]
}

config("crypto_backend_config") {
  include_dirs = [
    "//third_party/cryptsetup/lib",
    "//third_party/cryptsetup/lib/crypto_backend",
  ]
}

crypto_backend_sources = [
  "lib/crypto_backend/argon2_generic.c",
  "lib/crypto_backend/cipher_check.c",
  "lib/crypto_backend/cipher_generic.c",
  "lib/crypto_backend/crc32.c",
  "lib/crypto_backend/crypto_cipher_kernel.c",
  "lib/crypto_backend/crypto_kernel.c",
  "lib/crypto_backend/crypto_storage.c",
  "lib/crypto_backend/pbkdf2_generic.c",
]

static_library("crypto_backend_static") {
  sources = crypto_backend_sources
  output_name = "crypto_backend"
  public_configs = [ ":crypto_backend_config" ]
  cflags_c = [
    "-Wall",
    "-Os",
  ]
  deps = [
    "//third_party/JSON-C:json-c_static",
    "//third_party/LVM2:devmapper_static",
    "//third_party/cryptsetup:argon2_static",
    "//third_party/libuuid:libuuid_static",
    "//third_party/popt:popt_static",
  ]
}

config("cryptsetup_config") {
  include_dirs = [
    "//third_party/cryptsetup",
    "//third_party/cryptsetup/lib/luks1",
    "//third_party/cryptsetup/lib/luks2",
    "//third_party/cryptsetup/lib/loopaes",
    "//third_party/cryptsetup/lib/verity",
    "//third_party/cryptsetup/lib/tcrypt",
    "//third_party/cryptsetup/lib/integrity",
    "//third_party/libuuid",
    "//third_party/JSON-C",
  ]
}

cryptsetup_sources = [
  "lib/integrity/integrity.c",
  "lib/loopaes/loopaes.c",
  "lib/luks1/af.c",
  "lib/luks1/keyencryption.c",
  "lib/luks1/keymanage.c",
  "lib/luks2/luks2_digest.c",
  "lib/luks2/luks2_digest_pbkdf2.c",
  "lib/luks2/luks2_disk_metadata.c",
  "lib/luks2/luks2_json_format.c",
  "lib/luks2/luks2_json_metadata.c",
  "lib/luks2/luks2_keyslot.c",
  "lib/luks2/luks2_keyslot_luks2.c",
  "lib/luks2/luks2_keyslot_reenc.c",
  "lib/luks2/luks2_luks1_convert.c",
  "lib/luks2/luks2_reencrypt.c",
  "lib/luks2/luks2_segment.c",
  "lib/luks2/luks2_token.c",
  "lib/luks2/luks2_token_keyring.c",
  "lib/setup.c",
  "lib/tcrypt/tcrypt.c",
  "lib/utils.c",
  "lib/utils_benchmark.c",
  "lib/utils_blkid.c",
  "lib/utils_crypt.c",
  "lib/utils_device.c",
  "lib/utils_device_locking.c",
  "lib/utils_devpath.c",
  "lib/utils_fips.c",
  "lib/utils_keyring.c",
  "lib/utils_loop.c",
  "lib/utils_pbkdf.c",
  "lib/utils_storage_wrappers.c",
  "lib/utils_wipe.c",
  "lib/verity/rs_decode_char.c",
  "lib/verity/rs_encode_char.c",
  "lib/verity/verity.c",
  "lib/verity/verity_fec.c",
  "lib/verity/verity_hash.c",
]

static_library("cryptsetup_static") {
  sources = cryptsetup_sources
  output_name = "cryptsetup"
  public_configs = [ ":cryptsetup_config" ]
  configs -= [ "//build/lite/config:language_c" ]
  cflags_c = [
    "-std=gnu11",
    "-Wall",
    "-Os",
    "-include",
    "config.h",
  ]
  ldflags = [
    "-lpthread",
    "-lm",
  ]
  deps = [
    "//third_party/JSON-C:json-c_static",
    "//third_party/LVM2:devmapper_static",
    "//third_party/cryptsetup:crypto_backend_static",
    "//third_party/cryptsetup:utils_io_static",
    "//third_party/libuuid:libuuid_static",
    "//third_party/popt:popt_static",
  ]
}

lite_component("cryptsetup") {
  features = [ ":veritysetup" ]
}

config("veritysetup_config") {
  include_dirs = [
    "//third_party/cryptsetup",
    "//third_party/cryptsetup/src",
    "//third_party/popt",
    "//third_party/cryptsetup/lib",
    "//third_party/cryptsetup/lib/luks1",
    "//third_party/cryptsetup/lib/luks2",
    "//third_party/cryptsetup/lib/loopaes",
    "//third_party/cryptsetup/lib/verity",
    "//third_party/cryptsetup/lib/tcrypt",
    "//third_party/cryptsetup/lib/integrity",
    "//third_party/cryptsetup/lib/crypto_backend",
  ]
}

veritysetup_sources = [
  "//third_party/JSON-C/json-c/random_seed.c",
  "//third_party/cryptsetup/lib/base64.c",
  "//third_party/cryptsetup/lib/crypt_plain.c",
  "//third_party/cryptsetup/lib/crypto_backend/pbkdf_check.c",
  "//third_party/cryptsetup/lib/libdevmapper.c",
  "//third_party/cryptsetup/lib/random.c",
  "//third_party/cryptsetup/lib/utils_blkid.c",
  "//third_party/cryptsetup/lib/utils_crypt.c",
  "//third_party/cryptsetup/lib/utils_io.c",
  "//third_party/cryptsetup/lib/utils_loop.c",
  "//third_party/cryptsetup/lib/volumekey.c",
  "//third_party/cryptsetup/src/utils_tools.c",
  "//third_party/cryptsetup/src/veritysetup.c",
]

executable("veritysetup") {
  output_name = "veritysetup"
  sources = veritysetup_sources
  public_configs = [ ":veritysetup_config" ]
  cflags_c = [
    "-include",
    "config.h",
    "-Wall",
    "-Os",
    "-fPIE",
    "-ffunction-sections",
    "-fdata-sections",
  ]

  ldflags = [
    "-lpthread",
    "-lm",
  ]

  deps = [
    "//third_party/JSON-C:json-c_static",
    "//third_party/LVM2:devmapper_static",
    "//third_party/cryptsetup:crypto_backend_static",
    "//third_party/cryptsetup:cryptsetup_static",
    "//third_party/libuuid:libuuid_static",
    "//third_party/popt:popt_static",
  ]
}
